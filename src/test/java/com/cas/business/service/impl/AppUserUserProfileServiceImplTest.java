/*
 * Created on 4 May 2016 ( Time 15:51:01 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.cas.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.cas.bean.AppUserUserProfile;
import com.cas.bean.jpa.AppUserUserProfileEntity;
import com.cas.bean.jpa.AppUserUserProfileEntityKey;
import com.cas.business.service.mapping.AppUserUserProfileServiceMapper;
import com.cas.data.repository.jpa.AppUserUserProfileJpaRepository;
import com.cas.test.AppUserUserProfileFactoryForTest;
import com.cas.test.AppUserUserProfileEntityFactoryForTest;
import com.cas.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of AppUserUserProfileService
 */
@RunWith(MockitoJUnitRunner.class)
public class AppUserUserProfileServiceImplTest {

	@InjectMocks
	private AppUserUserProfileServiceImpl appUserUserProfileService;
	@Mock
	private AppUserUserProfileJpaRepository appUserUserProfileJpaRepository;
	@Mock
	private AppUserUserProfileServiceMapper appUserUserProfileServiceMapper;
	
	private AppUserUserProfileFactoryForTest appUserUserProfileFactoryForTest = new AppUserUserProfileFactoryForTest();

	private AppUserUserProfileEntityFactoryForTest appUserUserProfileEntityFactoryForTest = new AppUserUserProfileEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Long userId = mockValues.nextLong();
		Long userProfileId = mockValues.nextLong();
		
		AppUserUserProfileEntityKey appUserUserProfileEntityKey = new AppUserUserProfileEntityKey(userId, userProfileId);
		appUserUserProfileEntityKey.setUserId(userId);
		appUserUserProfileEntityKey.setUserProfileId(userProfileId);
		
		AppUserUserProfileEntity appUserUserProfileEntity = appUserUserProfileJpaRepository.findOne(appUserUserProfileEntityKey);
		
		AppUserUserProfile appUserUserProfile = appUserUserProfileFactoryForTest.newAppUserUserProfile();
		when(appUserUserProfileServiceMapper.mapAppUserUserProfileEntityToAppUserUserProfile(appUserUserProfileEntity)).thenReturn(appUserUserProfile);

		// When
		AppUserUserProfile appUserUserProfileFound = appUserUserProfileService.findById(userId, userProfileId);

		// Then
		assertEquals(appUserUserProfile.getUserId(),appUserUserProfileFound.getUserId());
		assertEquals(appUserUserProfile.getUserProfileId(),appUserUserProfileFound.getUserProfileId());
	}

	@Test
	public void findAll() {
		// Given
		List<AppUserUserProfileEntity> appUserUserProfileEntitys = new ArrayList<AppUserUserProfileEntity>();
		AppUserUserProfileEntity appUserUserProfileEntity1 = appUserUserProfileEntityFactoryForTest.newAppUserUserProfileEntity();
		appUserUserProfileEntitys.add(appUserUserProfileEntity1);
		AppUserUserProfileEntity appUserUserProfileEntity2 = appUserUserProfileEntityFactoryForTest.newAppUserUserProfileEntity();
		appUserUserProfileEntitys.add(appUserUserProfileEntity2);
		when(appUserUserProfileJpaRepository.findAll()).thenReturn(appUserUserProfileEntitys);
		
		AppUserUserProfile appUserUserProfile1 = appUserUserProfileFactoryForTest.newAppUserUserProfile();
		when(appUserUserProfileServiceMapper.mapAppUserUserProfileEntityToAppUserUserProfile(appUserUserProfileEntity1)).thenReturn(appUserUserProfile1);
		AppUserUserProfile appUserUserProfile2 = appUserUserProfileFactoryForTest.newAppUserUserProfile();
		when(appUserUserProfileServiceMapper.mapAppUserUserProfileEntityToAppUserUserProfile(appUserUserProfileEntity2)).thenReturn(appUserUserProfile2);

		// When
		List<AppUserUserProfile> appUserUserProfilesFounds = appUserUserProfileService.findAll();

		// Then
		assertTrue(appUserUserProfile1 == appUserUserProfilesFounds.get(0));
		assertTrue(appUserUserProfile2 == appUserUserProfilesFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		AppUserUserProfile appUserUserProfile = appUserUserProfileFactoryForTest.newAppUserUserProfile();

		AppUserUserProfileEntityKey id = new AppUserUserProfileEntityKey(appUserUserProfile.getUserId(), appUserUserProfile.getUserProfileId());
		AppUserUserProfileEntity appUserUserProfileEntity = appUserUserProfileEntityFactoryForTest.newAppUserUserProfileEntity();
		when(appUserUserProfileJpaRepository.findOne(id)).thenReturn(null);
		
		appUserUserProfileEntity = new AppUserUserProfileEntity();
		appUserUserProfileServiceMapper.mapAppUserUserProfileToAppUserUserProfileEntity(appUserUserProfile, appUserUserProfileEntity);
		AppUserUserProfileEntity appUserUserProfileEntitySaved = appUserUserProfileJpaRepository.save(appUserUserProfileEntity);
		
		AppUserUserProfile appUserUserProfileSaved = appUserUserProfileFactoryForTest.newAppUserUserProfile();
		when(appUserUserProfileServiceMapper.mapAppUserUserProfileEntityToAppUserUserProfile(appUserUserProfileEntitySaved)).thenReturn(appUserUserProfileSaved);

		// When
		AppUserUserProfile appUserUserProfileResult = appUserUserProfileService.create(appUserUserProfile);

		// Then
		assertTrue(appUserUserProfileResult == appUserUserProfileSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		AppUserUserProfile appUserUserProfile = appUserUserProfileFactoryForTest.newAppUserUserProfile();

		AppUserUserProfileEntityKey id = new AppUserUserProfileEntityKey(appUserUserProfile.getUserId(), appUserUserProfile.getUserProfileId());
		AppUserUserProfileEntity appUserUserProfileEntity = appUserUserProfileEntityFactoryForTest.newAppUserUserProfileEntity();
		when(appUserUserProfileJpaRepository.findOne(id)).thenReturn(appUserUserProfileEntity);

		// When
		Exception exception = null;
		try {
			appUserUserProfileService.create(appUserUserProfile);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		AppUserUserProfile appUserUserProfile = appUserUserProfileFactoryForTest.newAppUserUserProfile();

		AppUserUserProfileEntityKey id = new AppUserUserProfileEntityKey(appUserUserProfile.getUserId(), appUserUserProfile.getUserProfileId());
		AppUserUserProfileEntity appUserUserProfileEntity = appUserUserProfileEntityFactoryForTest.newAppUserUserProfileEntity();
		when(appUserUserProfileJpaRepository.findOne(id)).thenReturn(appUserUserProfileEntity);
		
		AppUserUserProfileEntity appUserUserProfileEntitySaved = appUserUserProfileEntityFactoryForTest.newAppUserUserProfileEntity();
		when(appUserUserProfileJpaRepository.save(appUserUserProfileEntity)).thenReturn(appUserUserProfileEntitySaved);
		
		AppUserUserProfile appUserUserProfileSaved = appUserUserProfileFactoryForTest.newAppUserUserProfile();
		when(appUserUserProfileServiceMapper.mapAppUserUserProfileEntityToAppUserUserProfile(appUserUserProfileEntitySaved)).thenReturn(appUserUserProfileSaved);

		// When
		AppUserUserProfile appUserUserProfileResult = appUserUserProfileService.update(appUserUserProfile);

		// Then
		verify(appUserUserProfileServiceMapper).mapAppUserUserProfileToAppUserUserProfileEntity(appUserUserProfile, appUserUserProfileEntity);
		assertTrue(appUserUserProfileResult == appUserUserProfileSaved);
	}

	@Test
	public void delete() {
		// Given
		Long userId = mockValues.nextLong();
		Long userProfileId = mockValues.nextLong();
		AppUserUserProfileEntityKey appUserUserProfileEntityKey = new AppUserUserProfileEntityKey(userId, userProfileId);

		// When
		appUserUserProfileService.delete(userId, userProfileId);

		// Then
		verify(appUserUserProfileJpaRepository).delete(appUserUserProfileEntityKey);
		
	}

}
