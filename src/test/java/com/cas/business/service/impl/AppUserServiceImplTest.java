/*
 * Created on 4 May 2016 ( Time 15:51:01 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.cas.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.cas.bean.AppUser;
import com.cas.bean.jpa.AppUserEntity;
import java.util.List;
import com.cas.business.service.mapping.AppUserServiceMapper;
import com.cas.data.repository.jpa.AppUserJpaRepository;
import com.cas.test.AppUserFactoryForTest;
import com.cas.test.AppUserEntityFactoryForTest;
import com.cas.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of AppUserService
 */
@RunWith(MockitoJUnitRunner.class)
public class AppUserServiceImplTest {

	@InjectMocks
	private AppUserServiceImpl appUserService;
	@Mock
	private AppUserJpaRepository appUserJpaRepository;
	@Mock
	private AppUserServiceMapper appUserServiceMapper;
	
	private AppUserFactoryForTest appUserFactoryForTest = new AppUserFactoryForTest();

	private AppUserEntityFactoryForTest appUserEntityFactoryForTest = new AppUserEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Long id = mockValues.nextLong();
		
		AppUserEntity appUserEntity = appUserJpaRepository.findOne(id);
		
		AppUser appUser = appUserFactoryForTest.newAppUser();
		when(appUserServiceMapper.mapAppUserEntityToAppUser(appUserEntity)).thenReturn(appUser);

		// When
		AppUser appUserFound = appUserService.findById(id);

		// Then
		assertEquals(appUser.getId(),appUserFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<AppUserEntity> appUserEntitys = new ArrayList<AppUserEntity>();
		AppUserEntity appUserEntity1 = appUserEntityFactoryForTest.newAppUserEntity();
		appUserEntitys.add(appUserEntity1);
		AppUserEntity appUserEntity2 = appUserEntityFactoryForTest.newAppUserEntity();
		appUserEntitys.add(appUserEntity2);
		when(appUserJpaRepository.findAll()).thenReturn(appUserEntitys);
		
		AppUser appUser1 = appUserFactoryForTest.newAppUser();
		when(appUserServiceMapper.mapAppUserEntityToAppUser(appUserEntity1)).thenReturn(appUser1);
		AppUser appUser2 = appUserFactoryForTest.newAppUser();
		when(appUserServiceMapper.mapAppUserEntityToAppUser(appUserEntity2)).thenReturn(appUser2);

		// When
		List<AppUser> appUsersFounds = appUserService.findAll();

		// Then
		assertTrue(appUser1 == appUsersFounds.get(0));
		assertTrue(appUser2 == appUsersFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		AppUser appUser = appUserFactoryForTest.newAppUser();

		AppUserEntity appUserEntity = appUserEntityFactoryForTest.newAppUserEntity();
		when(appUserJpaRepository.findOne(appUser.getId())).thenReturn(null);
		
		appUserEntity = new AppUserEntity();
		appUserServiceMapper.mapAppUserToAppUserEntity(appUser, appUserEntity);
		AppUserEntity appUserEntitySaved = appUserJpaRepository.save(appUserEntity);
		
		AppUser appUserSaved = appUserFactoryForTest.newAppUser();
		when(appUserServiceMapper.mapAppUserEntityToAppUser(appUserEntitySaved)).thenReturn(appUserSaved);

		// When
		AppUser appUserResult = appUserService.create(appUser);

		// Then
		assertTrue(appUserResult == appUserSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		AppUser appUser = appUserFactoryForTest.newAppUser();

		AppUserEntity appUserEntity = appUserEntityFactoryForTest.newAppUserEntity();
		when(appUserJpaRepository.findOne(appUser.getId())).thenReturn(appUserEntity);

		// When
		Exception exception = null;
		try {
			appUserService.create(appUser);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		AppUser appUser = appUserFactoryForTest.newAppUser();

		AppUserEntity appUserEntity = appUserEntityFactoryForTest.newAppUserEntity();
		when(appUserJpaRepository.findOne(appUser.getId())).thenReturn(appUserEntity);
		
		AppUserEntity appUserEntitySaved = appUserEntityFactoryForTest.newAppUserEntity();
		when(appUserJpaRepository.save(appUserEntity)).thenReturn(appUserEntitySaved);
		
		AppUser appUserSaved = appUserFactoryForTest.newAppUser();
		when(appUserServiceMapper.mapAppUserEntityToAppUser(appUserEntitySaved)).thenReturn(appUserSaved);

		// When
		AppUser appUserResult = appUserService.update(appUser);

		// Then
		verify(appUserServiceMapper).mapAppUserToAppUserEntity(appUser, appUserEntity);
		assertTrue(appUserResult == appUserSaved);
	}

	@Test
	public void delete() {
		// Given
		Long id = mockValues.nextLong();

		// When
		appUserService.delete(id);

		// Then
		verify(appUserJpaRepository).delete(id);
		
	}

}
