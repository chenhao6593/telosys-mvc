/*
 * Created on 4 May 2016 ( Time 15:51:02 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.cas.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.cas.bean.UserProfile;
import com.cas.bean.jpa.UserProfileEntity;
import java.util.List;
import com.cas.business.service.mapping.UserProfileServiceMapper;
import com.cas.data.repository.jpa.UserProfileJpaRepository;
import com.cas.test.UserProfileFactoryForTest;
import com.cas.test.UserProfileEntityFactoryForTest;
import com.cas.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of UserProfileService
 */
@RunWith(MockitoJUnitRunner.class)
public class UserProfileServiceImplTest {

	@InjectMocks
	private UserProfileServiceImpl userProfileService;
	@Mock
	private UserProfileJpaRepository userProfileJpaRepository;
	@Mock
	private UserProfileServiceMapper userProfileServiceMapper;
	
	private UserProfileFactoryForTest userProfileFactoryForTest = new UserProfileFactoryForTest();

	private UserProfileEntityFactoryForTest userProfileEntityFactoryForTest = new UserProfileEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Long id = mockValues.nextLong();
		
		UserProfileEntity userProfileEntity = userProfileJpaRepository.findOne(id);
		
		UserProfile userProfile = userProfileFactoryForTest.newUserProfile();
		when(userProfileServiceMapper.mapUserProfileEntityToUserProfile(userProfileEntity)).thenReturn(userProfile);

		// When
		UserProfile userProfileFound = userProfileService.findById(id);

		// Then
		assertEquals(userProfile.getId(),userProfileFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<UserProfileEntity> userProfileEntitys = new ArrayList<UserProfileEntity>();
		UserProfileEntity userProfileEntity1 = userProfileEntityFactoryForTest.newUserProfileEntity();
		userProfileEntitys.add(userProfileEntity1);
		UserProfileEntity userProfileEntity2 = userProfileEntityFactoryForTest.newUserProfileEntity();
		userProfileEntitys.add(userProfileEntity2);
		when(userProfileJpaRepository.findAll()).thenReturn(userProfileEntitys);
		
		UserProfile userProfile1 = userProfileFactoryForTest.newUserProfile();
		when(userProfileServiceMapper.mapUserProfileEntityToUserProfile(userProfileEntity1)).thenReturn(userProfile1);
		UserProfile userProfile2 = userProfileFactoryForTest.newUserProfile();
		when(userProfileServiceMapper.mapUserProfileEntityToUserProfile(userProfileEntity2)).thenReturn(userProfile2);

		// When
		List<UserProfile> userProfilesFounds = userProfileService.findAll();

		// Then
		assertTrue(userProfile1 == userProfilesFounds.get(0));
		assertTrue(userProfile2 == userProfilesFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		UserProfile userProfile = userProfileFactoryForTest.newUserProfile();

		UserProfileEntity userProfileEntity = userProfileEntityFactoryForTest.newUserProfileEntity();
		when(userProfileJpaRepository.findOne(userProfile.getId())).thenReturn(null);
		
		userProfileEntity = new UserProfileEntity();
		userProfileServiceMapper.mapUserProfileToUserProfileEntity(userProfile, userProfileEntity);
		UserProfileEntity userProfileEntitySaved = userProfileJpaRepository.save(userProfileEntity);
		
		UserProfile userProfileSaved = userProfileFactoryForTest.newUserProfile();
		when(userProfileServiceMapper.mapUserProfileEntityToUserProfile(userProfileEntitySaved)).thenReturn(userProfileSaved);

		// When
		UserProfile userProfileResult = userProfileService.create(userProfile);

		// Then
		assertTrue(userProfileResult == userProfileSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		UserProfile userProfile = userProfileFactoryForTest.newUserProfile();

		UserProfileEntity userProfileEntity = userProfileEntityFactoryForTest.newUserProfileEntity();
		when(userProfileJpaRepository.findOne(userProfile.getId())).thenReturn(userProfileEntity);

		// When
		Exception exception = null;
		try {
			userProfileService.create(userProfile);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		UserProfile userProfile = userProfileFactoryForTest.newUserProfile();

		UserProfileEntity userProfileEntity = userProfileEntityFactoryForTest.newUserProfileEntity();
		when(userProfileJpaRepository.findOne(userProfile.getId())).thenReturn(userProfileEntity);
		
		UserProfileEntity userProfileEntitySaved = userProfileEntityFactoryForTest.newUserProfileEntity();
		when(userProfileJpaRepository.save(userProfileEntity)).thenReturn(userProfileEntitySaved);
		
		UserProfile userProfileSaved = userProfileFactoryForTest.newUserProfile();
		when(userProfileServiceMapper.mapUserProfileEntityToUserProfile(userProfileEntitySaved)).thenReturn(userProfileSaved);

		// When
		UserProfile userProfileResult = userProfileService.update(userProfile);

		// Then
		verify(userProfileServiceMapper).mapUserProfileToUserProfileEntity(userProfile, userProfileEntity);
		assertTrue(userProfileResult == userProfileSaved);
	}

	@Test
	public void delete() {
		// Given
		Long id = mockValues.nextLong();

		// When
		userProfileService.delete(id);

		// Then
		verify(userProfileJpaRepository).delete(id);
		
	}

}
