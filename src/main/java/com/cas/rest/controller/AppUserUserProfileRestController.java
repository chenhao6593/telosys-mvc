/*
 * Created on 4 May 2016 ( Time 15:52:09 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.cas.rest.controller;

import java.util.LinkedList;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import com.cas.bean.AppUserUserProfile;
import com.cas.business.service.AppUserUserProfileService;
import com.cas.web.listitem.AppUserUserProfileListItem;

/**
 * Spring MVC controller for 'AppUserUserProfile' management.
 */
@Controller
public class AppUserUserProfileRestController {

	@Resource
	private AppUserUserProfileService appUserUserProfileService;
	
	@RequestMapping( value="/items/appUserUserProfile",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public List<AppUserUserProfileListItem> findAllAsListItems() {
		List<AppUserUserProfile> list = appUserUserProfileService.findAll();
		List<AppUserUserProfileListItem> items = new LinkedList<AppUserUserProfileListItem>();
		for ( AppUserUserProfile appUserUserProfile : list ) {
			items.add(new AppUserUserProfileListItem( appUserUserProfile ) );
		}
		return items;
	}
	
	@RequestMapping( value="/appUserUserProfile",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public List<AppUserUserProfile> findAll() {
		return appUserUserProfileService.findAll();
	}

	@RequestMapping( value="/appUserUserProfile/{userId}/{userProfileId}",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public AppUserUserProfile findOne(@PathVariable("userId") Long userId, @PathVariable("userProfileId") Long userProfileId) {
		return appUserUserProfileService.findById(userId, userProfileId);
	}
	
	@RequestMapping( value="/appUserUserProfile",
			method = RequestMethod.POST,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public AppUserUserProfile create(@RequestBody AppUserUserProfile appUserUserProfile) {
		return appUserUserProfileService.create(appUserUserProfile);
	}

	@RequestMapping( value="/appUserUserProfile/{userId}/{userProfileId}",
			method = RequestMethod.PUT,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public AppUserUserProfile update(@PathVariable("userId") Long userId, @PathVariable("userProfileId") Long userProfileId, @RequestBody AppUserUserProfile appUserUserProfile) {
		return appUserUserProfileService.update(appUserUserProfile);
	}

	@RequestMapping( value="/appUserUserProfile/{userId}/{userProfileId}",
			method = RequestMethod.DELETE,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public void delete(@PathVariable("userId") Long userId, @PathVariable("userProfileId") Long userProfileId) {
		appUserUserProfileService.delete(userId, userProfileId);
	}
	
}
