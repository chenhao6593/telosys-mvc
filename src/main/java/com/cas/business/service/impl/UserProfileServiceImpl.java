/*
 * Created on 4 May 2016 ( Time 15:51:02 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.cas.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import com.cas.bean.UserProfile;
import com.cas.bean.jpa.UserProfileEntity;
import java.util.List;
import com.cas.business.service.UserProfileService;
import com.cas.business.service.mapping.UserProfileServiceMapper;
import com.cas.data.repository.jpa.UserProfileJpaRepository;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of UserProfileService
 */
@Component
@Transactional
public class UserProfileServiceImpl implements UserProfileService {

	@Resource
	private UserProfileJpaRepository userProfileJpaRepository;

	@Resource
	private UserProfileServiceMapper userProfileServiceMapper;
	
	@Override
	public UserProfile findById(Long id) {
		UserProfileEntity userProfileEntity = userProfileJpaRepository.findOne(id);
		return userProfileServiceMapper.mapUserProfileEntityToUserProfile(userProfileEntity);
	}

	@Override
	public List<UserProfile> findAll() {
		Iterable<UserProfileEntity> entities = userProfileJpaRepository.findAll();
		List<UserProfile> beans = new ArrayList<UserProfile>();
		for(UserProfileEntity userProfileEntity : entities) {
			beans.add(userProfileServiceMapper.mapUserProfileEntityToUserProfile(userProfileEntity));
		}
		return beans;
	}

	@Override
	public UserProfile save(UserProfile userProfile) {
		return update(userProfile) ;
	}

	@Override
	public UserProfile create(UserProfile userProfile) {
		UserProfileEntity userProfileEntity = userProfileJpaRepository.findOne(userProfile.getId());
		if( userProfileEntity != null ) {
			throw new IllegalStateException("already.exists");
		}
		userProfileEntity = new UserProfileEntity();
		userProfileServiceMapper.mapUserProfileToUserProfileEntity(userProfile, userProfileEntity);
		UserProfileEntity userProfileEntitySaved = userProfileJpaRepository.save(userProfileEntity);
		return userProfileServiceMapper.mapUserProfileEntityToUserProfile(userProfileEntitySaved);
	}

	@Override
	public UserProfile update(UserProfile userProfile) {
		UserProfileEntity userProfileEntity = userProfileJpaRepository.findOne(userProfile.getId());
		userProfileServiceMapper.mapUserProfileToUserProfileEntity(userProfile, userProfileEntity);
		UserProfileEntity userProfileEntitySaved = userProfileJpaRepository.save(userProfileEntity);
		return userProfileServiceMapper.mapUserProfileEntityToUserProfile(userProfileEntitySaved);
	}

	@Override
	public void delete(Long id) {
		userProfileJpaRepository.delete(id);
	}

	public UserProfileJpaRepository getUserProfileJpaRepository() {
		return userProfileJpaRepository;
	}

	public void setUserProfileJpaRepository(UserProfileJpaRepository userProfileJpaRepository) {
		this.userProfileJpaRepository = userProfileJpaRepository;
	}

	public UserProfileServiceMapper getUserProfileServiceMapper() {
		return userProfileServiceMapper;
	}

	public void setUserProfileServiceMapper(UserProfileServiceMapper userProfileServiceMapper) {
		this.userProfileServiceMapper = userProfileServiceMapper;
	}

}
