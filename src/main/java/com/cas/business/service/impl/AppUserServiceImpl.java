/*
 * Created on 4 May 2016 ( Time 15:51:00 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.cas.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import com.cas.bean.AppUser;
import com.cas.bean.jpa.AppUserEntity;

import java.util.List;

import com.cas.business.service.AppUserService;
import com.cas.business.service.mapping.AppUserServiceMapper;
import com.cas.data.repository.jpa.AppUserJpaRepository;

import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of AppUserService
 */
@Component
@Transactional
public class AppUserServiceImpl implements AppUserService {

	@Resource
	private AppUserJpaRepository appUserJpaRepository;

	@Resource
	private AppUserServiceMapper appUserServiceMapper;
	
	@Override
	public AppUser findById(Long id) {
		AppUserEntity appUserEntity = appUserJpaRepository.findOne(id);
		return appUserServiceMapper.mapAppUserEntityToAppUser(appUserEntity);
	}
	
	@Override
	public AppUser findBySso(String sso) {
		AppUserEntity appUserEntity = appUserJpaRepository.findBySsoId(sso);
		return appUserServiceMapper.mapAppUserEntityToAppUser(appUserEntity);
	}

	@Override
	public List<AppUser> findAll() {
		Iterable<AppUserEntity> entities = appUserJpaRepository.findAll();
		List<AppUser> beans = new ArrayList<AppUser>();
		for(AppUserEntity appUserEntity : entities) {
			beans.add(appUserServiceMapper.mapAppUserEntityToAppUser(appUserEntity));
		}
		return beans;
	}

	@Override
	public AppUser save(AppUser appUser) {
		return update(appUser) ;
	}

	@Override
	public AppUser create(AppUser appUser) {
		AppUserEntity appUserEntity = appUserJpaRepository.findOne(appUser.getId());
		if( appUserEntity != null ) {
			throw new IllegalStateException("already.exists");
		}
		appUserEntity = new AppUserEntity();
		appUserServiceMapper.mapAppUserToAppUserEntity(appUser, appUserEntity);
		AppUserEntity appUserEntitySaved = appUserJpaRepository.save(appUserEntity);
		return appUserServiceMapper.mapAppUserEntityToAppUser(appUserEntitySaved);
	}

	@Override
	public AppUser update(AppUser appUser) {
		AppUserEntity appUserEntity = appUserJpaRepository.findOne(appUser.getId());
		appUserServiceMapper.mapAppUserToAppUserEntity(appUser, appUserEntity);
		AppUserEntity appUserEntitySaved = appUserJpaRepository.save(appUserEntity);
		return appUserServiceMapper.mapAppUserEntityToAppUser(appUserEntitySaved);
	}

	@Override
	public void delete(Long id) {
		appUserJpaRepository.delete(id);
	}

	public AppUserJpaRepository getAppUserJpaRepository() {
		return appUserJpaRepository;
	}

	public void setAppUserJpaRepository(AppUserJpaRepository appUserJpaRepository) {
		this.appUserJpaRepository = appUserJpaRepository;
	}

	public AppUserServiceMapper getAppUserServiceMapper() {
		return appUserServiceMapper;
	}

	public void setAppUserServiceMapper(AppUserServiceMapper appUserServiceMapper) {
		this.appUserServiceMapper = appUserServiceMapper;
	}

}
